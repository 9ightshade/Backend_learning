WHAT IS PYTHON?
python

Thousands of students start their coding journey right here with Python. We think it's the best programming language to get started with. Python is famous for being a simple language that's easy to read and write.

However, just because it's simple that doesn't mean it's not useful! Python is an extremely popular language in the industry, and is well-known for:

Backend web servers
DevOps and cloud engineering
Machine learning
Scripting and automation
etc...
On the other hand, it's not particularly well-known for front-end work. While it's possible to do so, Python isn't typically used to build visual user interfaces.


WHAT IS "CODE"?
Code is just a series of instructions that computers can follow. Computers obey each instruction, one after another.

Programs can be comprised of many instructions. Like many. Like millions.

Addition is one of the most common instructions in coding.

PRINTING NUMBERS
print() can print text using quotes:

print("some text here")

but it can also print numbers without quotes:

print(1)

and you can do math directly inside the parentheses:

print(1 + 2)

MULTIPLE INSTRUCTIONS
Code runs in order, starting at the top of the program. For example:

print("this prints first")
print("this prints second")
print("this prints last")

Each print() instruction prints on a new line.
SYNTAX ERRORS
Syntax is jargon for "valid code that the computer can understand". For example, the following code is invalid syntax:

prnt("hello world")

prnt() is not a valid function because "print" is spelled incorrectly. As a result, an error will be thrown and the code won't execute.

VARIABLES
Variables are how we store data in our program. So far we've been directly printing data by passing it directly into the print() function.

Now we are going to learn to save the data in variables so we can use and change it before we need to print it.

A variable is a name that we define that will point to some data. For example, I could define a new variable called my_height and set its value to 100. I could also define a variable called my_name and set it equal to "Lane".

CREATING VARIABLES
To create a new variable in Python we use the following syntax:

my_new_variable_two = 2
this_can_be_called_anything = 3

COMMENTS
Comments don't run like code, they are ignored by the computer. Comments are useful for adding reminders or explaining what a piece of code does in plain English.

SINGLE LINE COMMENT
# speed is a variable describing how fast your player moves
speed = 2

MULTI-LINE COMMENTS (AKA DOCSTRINGS)
You can use triple quotes to start and end multi-line comments as well:

"""
    the code found below
    will print 'Hello, World!' to the console
"""
print('Hello, World!')

This is useful if you don't want to add the # to the start of each line when writing paragraphs of comments.

VARIABLE NAMES
Variable names can't have spaces, they're continuous strings of characters.

In Python you should use "snake_case" when creating variable names - it's become the "rule of thumb" for the language. By way of comparison, "camelCase" is where the beginning of each new word except the first is capitalized.

CASING EXAMPLES
NO CASING (PURE INSANITY)
somevariablehere = 10

CAMEL CASE
someVariableHere = 10

SNAKE CASE
some_variable_here = 10

BASIC VARIABLE TYPES
In Python there are several basic data types.

STRING TYPE
"Strings" are raw text in coding speak. They are called "strings" because they are a list of characters strung together. Strings are declared in Python by using single quotes or double quotes. That said, for consistency's sake, we prefer double quotes.

name_with_single_quotes = 'Shadow'
name_with_double_quotes = "Shadow"

NUMERIC TYPES
Numbers aren't surrounded by quotes when created, but they can have decimals and negative signs.

INTEGERS ARE NUMBERS WITHOUT A DECIMAL
x = 5
y = -5

A "FLOAT" IS A NUMBER WITH A DECIMAL
x = 5.2
y = -5.2

BOOLEAN TYPE
A "Boolean" (or "bool") is a type that can only have one of two values: True or False. As you may have heard computers really only use 1's and 0's. These 1's and 0's are just Boolean values.

is_tall = True
is_short = False

ASSIGNMENT
player_health should be an integer and player_has_magic should be a boolean.


F-STRINGS IN PYTHON
You can create a string with dynamic values by using f-strings in Python. It's a beautiful syntax that I wish more programming languages used.

num_bananas = 10
print(f"You have {num_bananas} bananas")
# You have 10 bananas
Copy icon
The opening quotes must be preceded by an f.
Any variables within curly brackets have their values "interpolated" (injected) into the string.
ASSIGNMENT
Use an f-string to inject the dynamic values into the string:

Replace NAME with the value of the name variable
Replace RACE with the value of the race variable
Replace AGE with the value of the age variable
Do not "hard-code" the values into the string. For example, this is not the solution we're looking for (even though it happens to work in this case):

print("Yarl is a dwarf who is 37 years old.")

The problem with hard coding is that it doesn't work with values that change. What if we had multiple characters?

TIP
Punctuation matters! Make sure your output matches the expected output exactly


NONETYPE VARIABLES
Not all variables have a value. We can declare an "empty" variable by setting it to None.

empty = None

The value of empty in this instance is None until we use the assignment operator, =, to give it a value.

NONE IS NOT A SPECIFIC STRING
Note that the NoneType is not the same as a string with a value of "None":

my_none = None # this is a None-type
my_none = "None" # this is a string

ASSIGNMENT
Declare a variable named enemy and set it to None. Don't change the print(enemy) function.


DYNAMIC TYPING
Python is dynamically typed. All this means is that a variable can store any type, and that type can change.

For example, if I make a number variable, I can later change that variable to a string:

This is valid:

speed = 5
speed = "five"

JUST BECAUSE YOU CAN DOESN'T MEAN YOU SHOULD!
In almost all circumstances, it's a bad idea to change the type of a variable. The "proper" thing to do is to just create a new one. For example:

speed = 5
speed_description = "five"

WHAT IF IT WEREN'T DYNAMICALLY TYPED?
Languages that aren't dynamically typed are statically typed, such as Go (which you'll learn in a later course). In a statically typed language, if you try to assign a value to a variable of the wrong type, an error would crash the program.

If Python were statically-typed, the first example from before would crash on the second line, speed = "five". The computer would give an error along the lines of you can't assign a string value ("five") to a number variable (speed)

MATH WITH STRINGS
Most of the math operators we went over earlier don't work with strings, aside from the * and addition operators. When working with strings the + operator performs a "concatenation".

"Concatenation" is a fancy word that means the joining of two strings. You should prefer string interpolation with f-strings over concatenation.

first_name = "Lane "
last_name = "Wagner"
full_name = first_name + last_name
print(full_name)
# prints "Lane Wagner"

full_name now holds the value "Lane Wagner".

Notice the extra space at the end of "Lane " in the first_name variable. That extra space is there to separate the words in the final result: "Lane Wagner".

ASSIGNMENT
We have a second player in our game!

We need to tell each of our players how much health they have left.

print Player 1's health: You have 1200 health using string concatenation and the variables provided
print Player 2's health: You have 1100 health in the same way

MULTI-VARIABLE DECLARATION
We can save space when creating many new variables by declaring them on the same line:

sword_name, sword_damage, sword_length = "Excalibur", 10, 200

Which is the same as:

sword_name = "Excalibur"
sword_damage = 10
sword_length = 200

Any number of variables can be declared on the same line, and variables declared on the same line should be related to one another in some way so that the code remains easy to understand.

We call code that's easy to understand "clean code".


FUNCTIONS
Functions allow us to reuse and organize code. For example, say we've written some code that calculates the area of a circle:

radius = 5
area = 3.14 * radius * radius

That works! The problem is when we want to calculate the area of more circles, each with its own radius. We could just copy the code and change the variable names like this:

radius = 5
area1 = 3.14 * radius * radius

radius2 = 7
area2 = 3.14 * radius2 * radius2

But don't we want to reuse our code? Why would we want to repeat our work? What if we wanted to calculate the area of thousands of circles??? That's where functions help.

Instead, we can define a new function called area_of_circle using the def keyword.

def area_of_circle(r):
    pi = 3.14
    result = pi * r * r
    print(f"area of circle is: {result}")
    return result

The area_of_circle function takes one input and returns one output. The body of the function is indented and contains the code that will be run when the function is called. The return keyword tells the function to return the value that follows it as the output of the function. A function can have more than one return statement. The name of an input is called a parameter. In this case, it is r. The value of the input is called the argument.

To "call" this function ("call a function" is a fancy phrase that just means "use a function") we can now pass in any number as the argument (in this case, 5) for the parameter r, and capture the output into a new variable:

area = area_of_circle(5)
print(area)
# 78.5

5 goes in as the input, r, the result is calculated, and 78.5 comes out as the output. Because the function is already defined, we can use it again and again with different inputs:

area = area_of_circle(6)
print(area)
# 113.04

ASSIGNMENT
We need to calculate the size of a weapon's "attack area". With a 1.0 meter sword, for example, a player can attack in an area of 3.14 square meters around them. You can use the area_of_circle function to do that calculation.


The spear_area variable should be set to the result of calling the area_of_circle function with the given spear_length as input.


NONE RETURN
When no return value is specified in a function, it will automatically return None. For example, maybe it's a function that prints some text to the console, but doesn't explicitly return a value. The following code snippets all return the same value, None:

def my_func():
    print("I do nothing")
    return None

def my_func():
    print("I do nothing")
    return

def my_func():
    print("I do nothing")

MULTIPLE RETURN VALUES
In Python, we can return more than one value from a function.

First, we can return multiple values on one line by separating them with commas.

# returns email, age, and status of the user
def get_user():
    return "name@domain.com", 21, "active"

Second, when we call this function, we need to assign all the returned values to an equal number of variables by separating them with commas. The values will be assigned according to the order they are returned.

# sets email, age, and status to values returned from get_user() function
email, age, status = get_user()
print(email, age, status)
# name@domain.com 21 active

ASSIGNMENT
Complete the become_warrior function. It accepts 3 inputs:

first_name: string
last_name: string
power: integer
It should return 2 values:

First, a string of this format: "first_name last_name the warrior"
Second, the power input after adding 1 to it.
For example:

title, power = become_warrior("Aang", "Airbender", 100)
print(title)
# "Aang Airbender the warrior"
print(power)
# 101

TIP
You can use the + operator to concatenate strings together. For example:

first_name = "Aang"
last_name = "Airbender"
full_name = first_name + " " + last_name
print(full_name)
# "Aang Airbender"


PARAMETERS VS ARGUMENTS
Parameters are the names used for inputs when defining a function. Arguments are the names of the inputs supplied when a function is called.

To reiterate, arguments are the actual values that go into the function, say 42.0, "the dark knight", or True. Parameters are the names we use in the function definition to refer to those values, which at the time of writing the function, could be anything.

That said, it is important to understand that this is all semantics, and frankly developers are really lazy with these definitions. You'll often hear the words arguments and parameters used interchangeably.

# a and b are parameters
def add(a, b):
    return a + b

# 5 and 6 are arguments
sum = add(5, 6)



DEFAULT VALUES FOR FUNCTION ARGUMENTS
Python has a way to specify a default value for function arguments. This can be convenient if a function has arguments that are essentially "optional", and you as the function creator want to use a specific default value in case the caller doesn't provide one.

A default value is created by using the assignment (=) operator in the function signature.

def get_greeting(email, name="there"):
    print("Hello", name, "welcome! You've registered your email:", email)


get_greeting("lane@example.com", "Lane")
# Hello Lane welcome! You've registered your email: lane@example.com


get_greeting("lane@example.com")
# Hello there welcome! You've registered your email: lane@example.com


If the second parameter is omitted, the default "there" value will be used in its place. As you may have guessed, for this structure to work, optional arguments that have defaults specified come after all the required arguments.

ASSIGNMENT
Complete both the get_punched and get_slashed functions. They should each take 2 arguments:

health: An integer
armor: An integer
Change the functions so if no armor argument is passed, armor defaults to 0.

Each attack does a different amount of damage. Getting punched does 50 damage. Getting slashed does 100 damage. The armor should absorb some of the attack by subtracting from the damage. The rest of the damage should be applied to the health. Return a single integer, the health left over after the attack.

PRINTING VS RETURNING
Some new developers get hung up on the difference between print() and return.

It can be particularly tricky when the test suite we provide prints the output of your functions to the console. This makes it seem like print() and return are interchangeable, but they are not!

print():
A function that prints a value to the console.
It does NOT return a value.

return:
A keyword that ends the function execution.
It gives the specified value back to the caller of the function.
It does NOT print anything to the console.

PRINTING TO DEBUG YOUR CODE
Printing values and running your code in the console is a great way to debug your code. You can see what values are stored in various variables, find your mistakes, and fix them. Add print statements and run your code as you go! It's a great habit to get into to make sure that each line you write is doing what you expect it to do.

In the real world it's rare to leave print() statements in your code once you're done debugging. Similarly, you need to remember to remove any print() statements from your code before submitting your work for review here on Boot.dev because it will interfere with the test suite!

ASSIGNMENT
There is a problem the get_title function! It's supposed to calculate the title value and return it to the caller. Instead, it's barbarically printing the value to the console.

Fix the function so that it returns the title value instead of printing it.


ASSIGNMENT
Complete the enchant_and_attack function. It creates a new "enchanted" name for a weapon and calculates how much damage the enchanted weapon will deal to a victim.

It accepts 3 parameters:

player_health: integer
damage: integer
weapon: string
It should do the following things in the function body:

Calculate and store the "enchanted damage" in a new variable. The enchanted damage should be the input damage plus 10.
Calculate and store the "new health" in a new variable. The new health should be the input player_health minus the enchanted damage.
Create a new variable called enchanted_weapon. It should be the input weapon with the string "enchanted " added to the beginning of it. For example:
sword -> enchanted sword
axe -> enchanted axe
Return the enchanted weapon and the new health in that order.


SCOPE
Scope refers to where a variable or function name is available to be used. For example, when we create variables in a function (by giving names to our parameters for example), that data is not available outside of that function.

For example:

def subtract(x, y):
    return x - y
result = subtract(5, 3)
print(x)
# ERROR! "name 'x' is not defined"


When the subtract function is called, we assign 5 to the variable x, but x only exists in the code within the subtract function. If we try to print x outside of that function, then we won't get a result. In fact, we'll get a big fat error.


ASSIGNMENT
Complete the total_xp function. It accepts two integers as input:

level
xp_to_add
There are 100 xp per level. total_xp should convert the current level to xp, then add this current xp to the xp_to_add argument and return the player's total xp. For example:

If a player is level 1 and gains 100 xp, they have 200 total xp.
If a player is level 2 and gains 250 xp, they have 450 total xp.
If a player is level 170 and gains 590 xp, they have 17590 total xp.
TIPS
The pass keyword is a way to tell Python to do nothing. You'll need to replace it with your own code.
Take a look at the main_test.py file at the top of your editor. You can read the tests but you can't edit them.


PYTHON NUMBERS
In Python, numbers without a decimal point are called Integers - just like they are in mathematics.

Integers are simply whole numbers, positive or negative. For example, 3 and -3 are both examples of integers.

Arithmetic can be performed as you might expect:

ADDITION
2 + 1
# 3

SUBTRACTION
2 - 1
# 1

MULTIPLICATION
2 * 2
# 4

DIVISION
3 / 2
# 1.5 (a float)

This one is actually a bit different - division on two integers will actually produce a float. A float is, as you may have guessed, the number type that allows for decimal values.

ASSIGNMENT
Calculate_damage function.

total_damage variable so that it contains the sum of all the different weapons' damage values.
average_damage variable so that it contains the average weapon damage.




FLOOR DIVISION
Python has great out-of-the-box support for mathematical operations. This, among other reasons, is why it has had such success in artificial intelligence, machine learning, and data science applications.

Floor division is like normal division except the result is floored afterward, which means the remainder is removed. As you would expect, this means the result is an integer instead of a float.

7 // 3
# 2 (an integer)

EXPONENTS
Python has built-in support for exponents - something most languages require a math library for.

# reads as "three squared" or
# "three raised to the second power"
3 ** 2
# 9


PLUS EQUALS
Python makes reassignment easy when doing math. In JavaScript or Go, you might be familiar with the ++ syntax for incrementing a number variable by 1. In Python, we use the += in-place operator instead.

star_rating = 4
star_rating += 1
# star_rating is now 5

OTHER OPERATORS
The other in-place operators work similarly:

star_rating = 4
star_rating -= 1
# star_rating is now 3

star_rating = 4
star_rating *= 2
# star_rating is now 8

star_rating = 4
star_rating /= 2
# star_rating is now 2.0

ASSIGNMENT
Complete the get_hurt function. It should use the -= in-place operator to subtract damage from current_health and then return the new current_health.

TIP
You cannot use -= in a return statement. Set the variable first, and then return it after!



LOGICAL OPERATORS
You're probably familiar with the logical operators and and or.

Logical operators deal with boolean values, True and False.

The logical and operator requires that both inputs are True to return True. The logical or operator only requires that at least one input is True to return True.

For example:

True and True == True
True and False == False
False and False == False

True or True == True
True or False == True
False or False == False

PYTHON SYNTAX
print(True and True)
# prints True

print(True or False)
# prints True

NESTING WITH PARENTHESES
We can nest logical expressions using parentheses.

print((True or False) and False)

First, we evaluate the expression in the parentheses, (True or False). It evaluates to True:

print(True and False)

True and False evaluates to False:

print(False)

So, print((True or False) and False) prints "False" to the console.


NOT
We skipped a very important logical operator - not. The not operator reverses the result. It returns False if the input was True and vice-versa.

print(not True)
# Prints: False

print(not False)
# Prints: True

COMPARISON OPERATOR EVALUATIONS
When a comparison happens, the result of the comparison is just a boolean value, it's either True or False.

Take the following two examples:

is_bigger = 5 > 4
Copy icon
is_bigger = True
Copy icon
In both of the above cases, we're creating a Boolean variable called is_bigger with a value of True.

Because 5 is greater than 4, is_bigger is assigned the value of True.

ASSIGNMENT
Create the following variables. Use comparison operators to determine their boolean values. The context of the parameter names should tell you how to make these comparisons. Return them in this order:

is_mustang_edward_same
is_alphonse_edward_same
is_winry_alphonse_same


IF STATEMENTS
It's often useful to only execute code if a certain condition is met:

if CONDITION:
	# do some stuff here

# code after the if block will run regardless

For example, in this code:

if bob_score > bill_score:
	print("Bob Wins!")

print("Game Complete")

if bob_score is greater than bill_score, then this will be printed:

Bob Wins!
Game Complete

Otherwise, this will be printed:

Game Complete

ASSIGNMENT
Complete the print_status function.

If player_health is 0, print the text dead to the console.
Afterwards, whether or not the player is dead, print the text status check complete to the console.
TIP
Indentation matters! Indentation is what tells Python whether or not the body of a function or if statement has ended.

LOOPS
Loops are a programmer's best friend. Loops allow us to do the same operation multiple times without having to write it explicitly each time.

For example, let's pretend I want to print the numbers 0-9.

I could do this:

print(0)
print(1)
print(2)
print(3)
print(4)
print(5)
print(6)
print(7)
print(8)
print(9)
Copy icon
Even so, it would save me a lot of time typing to use a loop. Especially if I wanted to do the same thing one thousand or one million times.

A "for loop" in Python is written like this:

for i in range(0, 10):
    print(i)

In English, the code says:

Start with i equals 0. (i in range(0)
If i is not less than 10 (range(0, 10)), exit the loop.
Print i to the console. (print(i))
Add 1 to i. (range defaults to incrementing by 1)
Go back to step 2
The result is that the numbers 0-9 are logged to the console in order.

WHITESPACE MATTERS IN PYTHON!
The body of a for-loop must be indented, otherwise you'll get a syntax error.

ASSIGNMENT
Complete the missing sections of the for-loop in the print_numbers function so that it prints the numbers 0-99 to the console.


RANGE CONTINUED
The range() function we've been using in our for loops actually has an optional 3rd parameter: the "step".

for i in range(0, 10, 2):
    print(i)
# prints:
# 0
# 2
# 4
# 6
# 8

The "step" parameter determines how much to add to i in each iteration of the loop. You can even go backwards:

for i in range(3, 0, -1):
    print(i)
# prints:
# 3
# 2
# 1

ASSIGNMENT
Fix the for loop in the count_down function so that it prints the numbers counting down from start to (but not including) end in order.

TIP
In the programming world, it's common for the first number in a range to be inclusive and the second number is exclusive. e.g. range(0, 10) will include:

0 1 2 3 4 5 6 7 8 9



LISTS
A natural way to organize and store data is in a List. Some languages call them "arrays", but in Python we just call them lists. Think of all the apps you use and how many of the items in the app are organized into lists.

For example:

An X (formerly Twitter) feed is a list of posts
An online store is a list of products
The state of a chess game is a list of moves
This list is a list of things that are lists
Lists in Python are declared using square brackets, with commas separating each item:

inventory = ["Iron Breastplate", "Healing Potion", "Leather Scraps"]
Copy icon
Lists can contain items of any data type, in our example above we have a List of strings.

ASSIGNMENT
Let's work on Fantasy Quest's inventory! We can store items the player is carrying in a list!

Fix our get_inventory function by adding Shortsword to the end of the list.



COUNTING IN PROGRAMMING
In the world of programming, counting is a bit strange!

We don't start counting at 1, we start at 0 instead.

INDEXES
Each item in a list has an index that refers to its spot in the list.

Take the following list as an example:

names = ["Bob", "Lane", "Alice", "Breanna"]

Index 0: Bob
Index 1: Lane
Index 2: Alice
Index 3: Breanna

INDEXING INTO LISTS
Now that we know how to create new lists, we need to know how to access specific items in the list.

We access items in a list directly by using their index. Indexes start at 0 (the first item) and increment by one with each successive item. The syntax is as follows:

best_languages = ["JavaScript", "Go", "Rust", "Python", "C"]
print(best_languages[1])
# prints "Go", because index 1 was provided

APPENDING IN PYTHON
It's common to create an empty list then fill it with values using a loop. We can add values to the end of a list using the .append() method:

cards = []
cards.append("nvidia")
cards.append("amd")
# the cards list is now ['nvidia', 'amd']
Copy icon
ASSIGNMENT
We need to generate a unique user ID for each player in the game. An ID is just a unique number that identifies a user.

Let's finish the generate_user_list function. Use the body of the loop to add the unique ID's to the player_ids list.


POP VALUES
.pop() is the opposite of .append(). Pop removes the last element from a list and returns it for use. For example:

vegetables = ["broccoli", "cabbage", "kale", "tomato"];
last_vegetable = vegetables.pop()
# vegetables = ['broccoli', 'cabbage', 'kale']
# last_vegetable = 'tomato'
Copy icon
ASSIGNMENT
Our player is selling the items in their inventory to the shopkeep!

Pop the last element from the inventory list until there is nothing left. Pop the elements into an item variable so that each prints in turn on line 19


NO-INDEX SYNTAX
In my opinion, Python has the most elegant syntax for iterating directly over the items in a list without worrying about index numbers. If you don't need the index number you can use the following syntax:

trees = ['oak', 'pine', 'maple']
for tree in trees:
    print(tree)
# Prints:
# oak
# pine
# maple

tree, the variable declared using the in keyword, directly accesses the value in the list rather than the index of the value. If we don't need to update the item and only need to access its value then this is a more clean way to write the code.




SLICING LISTS
Python makes it easy to slice and dice lists to work only with the section you care about. One way to do this is to use the simple slicing operator, which is just a colon :.

With this operator, you can specify where to start and end the slice, and how to step through the original. List slicing returns a new list from the existing list.

The syntax is as follows:

my_list[ start : stop : step ]

For example:

scores = [50, 70, 30, 20, 90, 10, 50]
# Display list
print(scores[1:5:2])
# Prints [70, 20]
Copy icon
The above reads as "give me a slice of the scores list from index 1, up to but not including 5, skipping every 2nd value. All of the sections are optional.

OMITTING SECTIONS
You can also omit various sections ("start", "stop", or "step"). For example, numbers[:3] means "get all items from the start up to (but not including) index 3". numbers[3:] means "get all items from index 3 to the end".

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers[:3] # Gives [0, 1, 2]
numbers[3:] # Gives [3, 4, 5, 6, 7, 8, 9]
Copy icon
USING ONLY THE "STEP" SECTION
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers[::2] # Gives [0, 2, 4, 6, 8]
Copy icon
NEGATIVE INDICES
Negative indices count from the end of the list. For example, numbers[-1] gives the last item in the list, numbers[-2] gives the second last item, and so on.

numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers[-3:] # Gives [7, 8, 9]
Copy icon
ASSIGNMENT
Complete the given get_champion_slices function. It takes a list of champions and should return three new lists based on the given champions:

First, return a slice of the champions list that starts with the third champion and goes to the end of the list.
Next, return a slice of the champions list that starts at the beginning of the list and ends with the third champion from the end (inclusive).
Last, return a slice of the champions list that only includes the champions in even numbered indexes.
TIP
Remember, you can return multiple values from a function by separating them with commas:

return value1, value2, value3
